<?php

namespace Tests\Feature\Commands;

use Tests\TestCase;
use App\Models\Question;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CreateQuestionsTest extends TestCase
{
    use  RefreshDatabase;

    public $options;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->options = [
            'Create a question',
            'List all questions',
            'Practice',
            'Stats',
            'Reset',
            'Exit',
        ];
    }
    /** @test */
    public function guests_can_create_a_question()
    {
        //Arrange
        $question = Question::factory()->raw(['description'=>'desc', 'answer'=> 'ans', 'status'=> 'NOT ANSWERED']);
        $this->assertDatabaseMissing('questions', [
            'description' => $question['description'],
            'answer' => $question['answer'],
            'status'=> $question['status'],
        ]);
        //Act
        $this->artisan('qanda:interactive')

        //Assert
            ->expectsOutput('*** Welcome Guest ***')
            ->expectsChoice('Choose an option between 0-5', 'Create a question', $this->options)
            ->expectsOutput('Creating a question...')
            ->expectsQuestion('Write a question',$question['description'])
            ->expectsQuestion('Write a answer to the previous question',$question['answer'])
            ->assertExitCode(0);
        $this->assertDatabaseHas('questions', [
            'description' => $question['description'],
            'answer' => $question['answer'],
            'status'=> $question['status'],
        ]);
    }

    /** @test */
    public function a_specific_user_can_create_a_question()
    {
        //Arrange
        $question = Question::factory()->raw(['description'=>'desc', 'answer'=> 'ans', 'status'=> 'NOT ANSWERED']);
        $this->assertDatabaseMissing('questions', [
            'description' => $question['description'],
            'answer' => $question['answer'],
            'status'=> $question['status'],
        ]);
        //Act
       $this->artisan('qanda:interactive cris@test.com')

        //Assert
            ->expectsOutput('*** Welcome Cris ***')
           ->expectsChoice('Choose an option between 0-5', 'Create a question', $this->options)
           ->expectsOutput('Creating a question...')
           ->expectsQuestion('Write a question',$question['description'])
           ->expectsQuestion('Write a answer to the previous question',$question['answer'])
           ->assertExitCode(0);
        $this->assertDatabaseHas('questions', [
            'description' => $question['description'],
            'answer' => $question['answer'],
            'status'=> $question['status'],
        ]);
    }
}
