<?php

namespace Tests\Feature\Commands;

use App\Models\Question;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ResetQuestionsTest extends TestCase
{
    use  RefreshDatabase;

    public $options;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->options = [
            'Create a question',
            'List all questions',
            'Practice',
            'Stats',
            'Reset',
            'Exit',
        ];
    }

    /** @test */
    public function it_can_reset()
    {
        //Arrange
        $user = User::factory()->create(['name'=>'Guest', 'email'=>'guest@test.com', 'password'=>'password']);
        $notAnsweredQuestions = Question::factory()->count(3)->create(['user_id'=>$user->id]);
        $correctQuestions = Question::factory()->count(2)->create(['user_id'=>$user->id, 'status'=>'CORRECT']);
        $incorrectQuestion = Question::factory()->create(['user_id'=>$user->id, 'status'=>'INCORRECT']);

        //Act
        $this->artisan('qanda:interactive')

            //Assert
            ->expectsOutput('*** Welcome Guest ***')
            ->expectsChoice('Choose an option between 0-5', 'Reset' , $this->options)
            ->expectsOutput('Erasing all practice progress...');
        $this->assertDatabaseHas('questions', ['id'=> $notAnsweredQuestions[0]->id, 'status' => 'NOT ANSWERED']);
        $this->assertDatabaseHas('questions', ['id'=> $correctQuestions[0]->id, 'status' => 'NOT ANSWERED']);
        $this->assertDatabaseHas('questions', ['id'=> $incorrectQuestion->id, 'status' => 'NOT ANSWERED']);
    }
}
